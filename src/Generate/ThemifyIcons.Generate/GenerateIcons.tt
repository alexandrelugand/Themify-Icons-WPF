<#@ template language="C#" debug="true" hostSpecific="true"  #>
<#@ output extension="log" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="ThemifyIcons.Generate" #>
<#@ include file="Utils.tt" #>
<#
    Directory.SetCurrentDirectory(Path.GetDirectoryName(Host.TemplateFile));

    var folderProject = Directory.GetCurrentDirectory();
    var folderRepo = new DirectoryInfo(folderProject).Parent.Parent.Parent.FullName;
    var bowerJson = Path.Combine(folderRepo, @"themify-icons\bower.json");
    var configCss = Path.Combine(folderRepo, @"themify-icons\css\themify-icons.css");

    var outputFile = Path.Combine(folderRepo, @"src\ThemifyIcons.WPF\ThemifyIconsIcon.cs");
    var interop = new ThemifyIconsInterop(bowerJson, configCss);

    WriteAutoGenerated();
    
    WriteLine("using System.ComponentModel;");
    WriteLine("namespace ThemifyIcons.WPF");
    WriteLine("{");
    PushIndent("\t");
    WriteLine("///<summary>");
    WriteLine("///	Themify Icons {0} by {1}", interop.Config.DocBlob, string.Join(", ", interop.Config.Authors.Select(a => string.Format("{0} (@{1})", a.Name, a.Contact))));
    WriteLine("///	{0}", interop.Config.Tagline);
    WriteLine("///	License https://github.com/lykmapipo/themify-icons/blob/master/README.md (Font: {0}, C#: {1} License)", interop.Config.DocBlob, interop.Config.License);
    WriteLine("///</summary>");
    WriteLine("///<see href=\"{0}\" />", interop.Config.Url);
    WriteLine("///<seealso href=\"https://github.com/alexandrelugand/Themify-Icons-WPF\" />");
    WriteLine("public enum ThemifyIconsIcon");
    WriteLine("{");
    PushIndent("\t");
    WriteLine("///<summary>Set this value to show no icon.</summary>");
    WriteLine("None = 0x0,");
    
    foreach(var item in interop.Items) 
    {
        WriteLine("///<summary>{0}</summary>", item.Name);
        var sb = new StringBuilder();
        sb.AppendFormat("Description(\"{0}\"),", item.Name);
		sb.AppendFormat("IconId(\"{0}\"),", item.Id);
		sb.AppendFormat("IconCategory(\"Themify Icons\")");
        WriteLine("[{0}]", sb.ToString());
        WriteLine("{0} = 0x{1},", item.Name, item.Unicode);
    }
    PopIndent();
    WriteLine("}");
    PopIndent();
    WriteLine("}");
    
    SaveOutput(outputFile);
#>